{"version":3,"sources":["AddItemForm/AddItemForm.tsx","EditableSpan/EditableSpan.tsx","Todolist/Tasks/Tasks.tsx","Todolist/Todolist.tsx","reducers/TasksReducer.ts","reducers/TodolistReducer.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","addItem","useState","filterInput","setFilterInput","error","setError","filterInputTrim","trim","style","display","flexDirection","alignItems","TextField","label","size","variant","value","helperText","onChange","event","currentTarget","onKeyDown","key","IconButton","className","classes","buttonAdd","onClick","AddCircleTwoTone","EditableSpan","props","editMode","setEditMode","title","valueInput","valueInputTitle","e","onBlur","changeTitle","autoFocus","onDoubleClick","Tasks","tasksNotFound","filteredTasks","map","t","marginLeft","id","isDone","FormControlLabel","control","Checkbox","checked","idTodolist","todolistId","addCheckedTask","icon","FavoriteBorder","checkedIcon","Favorite","name","changeTitleTaks","changeTitleTask","buttonDelete","deleteTask","Delete","Todolist","onClickChandgeHandler","changeFilter","tasks","filter","el","length","task","textAlign","changeTitleTodolist","deleleTodolist","DeleteForever","justifyContent","addNewTask","Button","color","TasksReducer","state","action","type","idTask","v1","titleTask","statusTask","copyState","TodolistReducer","tl","isDoneStatus","todolistID","App","todolist1","todolist2","useReducer","dispatchTasks","todolist","dispatchTodolist","deleteTaskAC","changeFilterAC","addNewTaskAC","changeStatusTask","changeStatusTaskAC","deleteTodolistAC","deleleTasksForTodolistAC","idtodolist","changeTitleTodolistAC","changeTitleTaskAC","mappingTodolists","arrayTasks","Grid","item","Paper","padding","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","container","paddingTop","paddingBottom","addTodolistAC","spacing","Boolean","window","location","hostname","match","theme","createTheme","palette","primary","main","secondary","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2f8da753.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport classes from \"../Todolist/Todolist.module.css\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddCircleTwoTone} from \"@material-ui/icons\";\r\n\r\n\r\ntype AddItemFormType = {\r\n    addItem: (t: string) => void\r\n}\r\n\r\nexport const AddItemForm: React.FC<AddItemFormType> = ({addItem}) => {\r\n    debugger\r\n    let [filterInput, setFilterInput] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n    let filterInputTrim = filterInput.trim()\r\n\r\n\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        setFilterInput(event.currentTarget.value)\r\n    }\r\n    const keyPressAddItem = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter' && filterInput !== '') {\r\n            addItem(filterInputTrim)\r\n            setFilterInput('')\r\n        } else if (event.key === 'Enter' && filterInput === '') setError('Title is requider')\r\n    }\r\n    const onClickaddItem = () => {\r\n        if (filterInputTrim === '') {\r\n            return setError('Title is requider')\r\n        }\r\n        addItem(filterInputTrim)\r\n        setFilterInput('')\r\n    }\r\n\r\n    return (\r\n        <div style={{display: 'flex', flexDirection: 'row', alignItems: 'center'}}>\r\n            <TextField label={'Title'} size={\"small\"} variant={\"outlined\"}\r\n                       error={!!error}\r\n                       value={filterInput}\r\n                       helperText={error && <div>{error}</div>}\r\n                       onChange={onChangeHandler} onKeyDown={keyPressAddItem}/>\r\n            <IconButton size={\"small\"}\r\n                        className={classes.buttonAdd}\r\n                        onClick={onClickaddItem}><AddCircleTwoTone/></IconButton>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanTypeProps = {\r\n    title: string\r\n    changeTitle: (t: string) => void\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanTypeProps) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [valueInput, valueInputTitle] = useState(props.title)\r\n\r\n    const changeEditModeOnDoubleClick = () => {\r\n        setEditMode(true)\r\n    }\r\n    const changeEditModeOnBlur = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(valueInput)\r\n    }\r\n\r\n\r\n    const onChangeHandker = (e: ChangeEvent<HTMLInputElement>) => {\r\n        valueInputTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n        editMode ?\r\n            <TextField variant={\"standard\"} value={valueInput} onChange={onChangeHandker} onBlur={changeEditModeOnBlur}\r\n                       autoFocus/> :\r\n            <span onDoubleClick={changeEditModeOnDoubleClick}>{props.title}</span>\r\n    );\r\n};\r\n\r\n","import {EditableSpan} from \"../../EditableSpan/EditableSpan\";\r\nimport classes from \"../Todolist.module.css\";\r\nimport React from \"react\";\r\nimport {arrTasksPropsType} from \"../../App\";\r\nimport {Checkbox, FormControlLabel, IconButton} from \"@material-ui/core\";\r\nimport {Add, Delete, Favorite, FavoriteBorder} from \"@material-ui/icons\";\r\n\r\n\r\ntype TasksTypeProps = {\r\n    filteredTasks: Array<arrTasksPropsType>\r\n    todolistId: string\r\n    deleteTask: (id: string, todolistId: string) => void\r\n    addCheckedTask: (id: string, isDoneValue: boolean, idTodolist: string) => void\r\n    changeTitleTaks: (titleTask: string, id: string, idTodolist: string) => void\r\n    tasksNotFound: boolean\r\n}\r\nexport const Tasks = (props: TasksTypeProps) => {\r\n\r\n\r\n    const onClickHandlerDeleteTask = (id: string, todolistId: string) => {\r\n        props.deleteTask(id, todolistId)\r\n    }\r\n\r\n    const onChangeCheckHandler = (id: string, isDone: boolean, idTodolist: string) => {\r\n        props.addCheckedTask(id, isDone, idTodolist)\r\n    }\r\n    const changeTitleTask = (title: string, id: string) => {\r\n        props.changeTitleTaks(title, id, props.todolistId)\r\n    }\r\n\r\n    return (<div>{props.tasksNotFound ? <h4>Tasks not found</h4> : props.filteredTasks.map((t) => {\r\n        return (<div style={{marginLeft: '10px'}} key={t.id} className={t.isDone ? 'complitedCheckbox' : ''}>\r\n            <FormControlLabel\r\n                control={<Checkbox checked={t.isDone}\r\n                                   onChange={(e) => onChangeCheckHandler(t.id, e.currentTarget.checked, props.todolistId)}\r\n                                   icon={<FavoriteBorder/>} checkedIcon={<Favorite/>} name=\"checkedH\"/>}\r\n                label=\"\"\r\n            />\r\n            <EditableSpan title={t.title} changeTitle={(title) => changeTitleTask(title, t.id)}/>\r\n            <IconButton size={\"small\"} className={classes.buttonDelete}\r\n                        onClick={() => onClickHandlerDeleteTask(t.id, props.todolistId)}><Delete/>\r\n            </IconButton>\r\n        </div>)\r\n    })}</div>)\r\n}","import React from \"react\";\r\nimport classes from './Todolist.module.css'\r\nimport {arrTasksPropsType, FilterValuesType} from \".././App\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {Tasks} from \"./Tasks/Tasks\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {AddCircle, DeleteForever} from \"@material-ui/icons\";\r\n\r\n\r\ntype TodoListPropsType = {\r\n    title: string\r\n    tasks: Array<arrTasksPropsType>// Джинерики\r\n    deleteTask: (idTask: string, idTodolist: string) => void\r\n    changeFilter: (valueFilter: FilterValuesType, todolistId: string) => void\r\n    addNewTask: (titleTask: string, idTodolist: string) => void\r\n    addCheckedTask: (idTask: string, isDone: boolean, idTodolist: string) => void\r\n    filter: FilterValuesType\r\n    todolistId: string\r\n    deleleTodolist: (todolistId: string) => void\r\n    changeTitleTodolist: (titleTodolist: string, todolistId: string) => void\r\n    changeTitleTaks: (titleTask: string, id: string, todolistId: string) => void\r\n}\r\n\r\n\r\nexport let Todolist = (props: TodoListPropsType) => {\r\n\r\n    const onClickChandgeHandler = (name: FilterValuesType, todolistId: string) => {\r\n        props.changeFilter(name, props.todolistId)\r\n    }\r\n\r\n\r\n    const onClickHandlerTodolistDelete = (todolistId: string) => {\r\n        props.deleleTodolist(todolistId)\r\n    }\r\n\r\n    const addTask = (title: string) => {\r\n        props.addNewTask(title, props.todolistId)\r\n    }\r\n\r\n    const changeTitleTodo = (title: string) => {\r\n        props.changeTitleTodolist(title, props.todolistId)\r\n    }\r\n\r\n\r\n    let filteredTasks = props.tasks\r\n    if (props.filter === 'Completed') {\r\n        filteredTasks = props.tasks.filter(el => el.isDone)\r\n    }\r\n    if (props.filter === 'Active') {\r\n        filteredTasks = props.tasks.filter(el => !el.isDone)\r\n    }\r\n    if (props.filter === 'All') {\r\n        filteredTasks = props.tasks\r\n    }\r\n\r\n    const tasksNotFound = filteredTasks.length === 0\r\n\r\n    return (<div className={classes.task}>\r\n        <h2 style={{textAlign: 'center'}}>\r\n            <EditableSpan title={props.title} changeTitle={changeTitleTodo}/>\r\n            <IconButton size={\"small\"} onClick={() => onClickHandlerTodolistDelete(props.todolistId)}\r\n                        className={classes.buttonDelete}><DeleteForever/>\r\n            </IconButton>\r\n        </h2>\r\n        <div style={{display: 'flex', justifyContent: 'center'}}>\r\n            <AddItemForm addItem={addTask}/>\r\n        </div>\r\n\r\n        <Tasks filteredTasks={filteredTasks}\r\n               todolistId={props.todolistId}\r\n               deleteTask={props.deleteTask}\r\n               addCheckedTask={props.addCheckedTask}\r\n               changeTitleTaks={props.changeTitleTaks}\r\n               tasksNotFound={tasksNotFound}\r\n        />\r\n        <div style={{textAlign: 'center'}}>\r\n            <Button color={props.filter === 'All' ? \"secondary\" : \"default\"} size={\"small\"} variant={\"contained\"}\r\n                    onClick={() => onClickChandgeHandler('All', props.todolistId)}>All\r\n            </Button>\r\n            <Button color={props.filter === 'Active' ? \"secondary\" : \"default\"} style={{marginLeft: '3px'}}\r\n                    size={\"small\"} variant={\"contained\"}\r\n                    onClick={() => onClickChandgeHandler('Active', props.todolistId)}\r\n            >Active\r\n            </Button>\r\n            <Button color={props.filter === 'Completed' ? \"secondary\" : \"default\"} style={{marginLeft: '3px'}}\r\n                    size={\"small\"} variant={\"contained\"}\r\n                    onClick={() => onClickChandgeHandler('Completed', props.todolistId)}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>)\r\n}\r\n\r\n","import {TaskType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\ntype AllActionCreatorsType =\r\n    DeleteTaskACType\r\n    | AddNewTaskACType\r\n    | ChangeStatusTaskType\r\n    | ChangeTitleTaskAC\r\n    | DeleleTasksForTodolistAC\r\n    | AddTasksForTodolistAC\r\ntype DeleteTaskACType = ReturnType<typeof deleteTaskAC>\r\ntype AddNewTaskACType = ReturnType<typeof addNewTaskAC>\r\ntype ChangeStatusTaskType = ReturnType<typeof changeStatusTaskAC>\r\ntype ChangeTitleTaskAC = ReturnType<typeof changeTitleTaskAC>\r\ntype DeleleTasksForTodolistAC = ReturnType<typeof deleleTasksForTodolistAC>\r\ntype AddTasksForTodolistAC = ReturnType<typeof addTasksForTodolistAC>\r\n\r\n\r\nexport const TasksReducer = (state: TaskType, action: AllActionCreatorsType): TaskType => {\r\n    switch (action.type) {\r\n        case\"DELETE-TASK\":\r\n            return {...state, [action.idTodolist]: state[action.idTodolist].filter(task => task.id !== action.idTask)}\r\n        case \"ADD-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.idTodolist]: [{id: v1(), title: action.titleTask, isDone: false}, ...state[action.idTodolist]]\r\n            }\r\n        case \"CHANGE-STATUS-TASK\": {\r\n            return {\r\n                ...state,\r\n                [action.idTodolist]: state[action.idTodolist].map(t => t.id === action.idTask ? {\r\n                    ...t,\r\n                    isDone: action.statusTask\r\n                } : t)\r\n            }\r\n        }\r\n        case \"CHANGE-TITLE-TASK\": {\r\n            return {\r\n                ...state,\r\n                [action.idTodolist]: state[action.idTodolist].map(t => t.id === action.id ? {\r\n                    ...t,\r\n                    title: action.title\r\n                } : t)\r\n            }\r\n        }\r\n        case \"DELETE-TASKS-FOR-TODOLIST\": {\r\n            let copyState = {...state}\r\n            delete copyState[action.idTodolist]\r\n            return copyState\r\n        }\r\n        case \"ADD-TASKS-FOR-TODOLIST\": {\r\n            return {...state, [action.idTodolist]: []}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const deleteTaskAC = (idTask: string, idTodolist: string) => {\r\n    return {type: 'DELETE-TASK', idTask, idTodolist} as const\r\n}\r\n\r\nexport const addNewTaskAC = (titleTask: string, idTodolist: string) => {\r\n    return {type: 'ADD-TASK', titleTask, idTodolist} as const\r\n}\r\nexport const changeStatusTaskAC = (idTask: string, statusTask: boolean, idTodolist: string) => {\r\n    return {type: 'CHANGE-STATUS-TASK', idTask, statusTask, idTodolist} as const\r\n}\r\nexport const changeTitleTaskAC = (title: string, id: string, idTodolist: string) => {\r\n    return {type: 'CHANGE-TITLE-TASK', title, id, idTodolist} as const\r\n}\r\nexport const deleleTasksForTodolistAC = (idTodolist: string) => {\r\n    return {type: 'DELETE-TASKS-FOR-TODOLIST', idTodolist} as const\r\n}\r\nexport const addTasksForTodolistAC = (idTodolist: string) => {\r\n    return {type: 'ADD-TASKS-FOR-TODOLIST', idTodolist} as const\r\n}","import {FilterValuesType, TodolistsType} from \"../App\";\r\n\r\n\r\ntype ActionsType = ChangeFilterACType | DeleteTodolistACType | AddTodolistACType | ChangeTitleTodolistACType\r\ntype ChangeFilterACType = ReturnType<typeof changeFilterAC>\r\ntype DeleteTodolistACType = ReturnType<typeof deleteTodolistAC>\r\ntype AddTodolistACType = ReturnType<typeof addTodolistAC>\r\ntype ChangeTitleTodolistACType = ReturnType<typeof changeTitleTodolistAC>\r\n\r\n\r\nexport const TodolistReducer = (state: Array<TodolistsType>, action: ActionsType): Array<TodolistsType> => {\r\n    switch (action.type) {\r\n        case 'CHANGE-FILTER':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.isDoneStatus} : tl)\r\n        case \"DELETE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.idTodolist)\r\n        case \"ADD-TODOLIST\":\r\n            return [...state, {id: action.todolistID, title: action.title, filter: 'All'}]\r\n        case \"CHANGE-TITLE-TODOLIST\":\r\n            return state.map(tl => tl.id === action.todolistID ? {...tl, title: action.title} : tl)\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n};\r\n\r\nexport const changeFilterAC = (isDoneStatus: FilterValuesType, todolistId: string) => {\r\n    return {type: 'CHANGE-FILTER', isDoneStatus, todolistId} as const\r\n}\r\nexport const deleteTodolistAC = (idTodolist: string) => {\r\n    return {type: 'DELETE-TODOLIST', idTodolist} as const\r\n}\r\nexport const addTodolistAC = (title: string, todolistID: string) => {\r\n    return {type: 'ADD-TODOLIST', title, todolistID} as const\r\n}\r\nexport const changeTitleTodolistAC = (title: string, todolistID: string) => {\r\n    return {type: 'CHANGE-TITLE-TODOLIST', title, todolistID} as const\r\n}\r\n","import React, {useReducer} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm/AddItemForm\";\r\nimport {\r\n    addNewTaskAC,\r\n    deleleTasksForTodolistAC,\r\n    changeStatusTaskAC,\r\n    changeTitleTaskAC,\r\n    deleteTaskAC,\r\n    TasksReducer, addTasksForTodolistAC\r\n} from \"./reducers/TasksReducer\";\r\nimport {\r\n    addTodolistAC,\r\n    changeFilterAC,\r\n    changeTitleTodolistAC,\r\n    deleteTodolistAC,\r\n    TodolistReducer\r\n} from \"./reducers/TodolistReducer\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type FilterValuesType = 'All' | 'Active' | 'Completed'\r\nexport type TodolistsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type arrTasksPropsType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean\r\n}\r\nexport type TaskType = {\r\n    [key: string]: Array<arrTasksPropsType>\r\n}\r\n\r\nfunction App() {\r\n    let todolist1 = v1()\r\n    let todolist2 = v1()\r\n    let [tasks, dispatchTasks] = useReducer(TasksReducer, {\r\n        [todolist1]: [\r\n            {id: v1(), title: \"HTML\", isDone: true},\r\n            {id: v1(), title: \"CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Redux\", isDone: false}\r\n        ],\r\n        [todolist2]: [\r\n            {id: v1(), title: \"Meat\", isDone: false},\r\n            {id: v1(), title: \"Milk\", isDone: false},\r\n            {id: v1(), title: \"Book\", isDone: true},\r\n            {id: v1(), title: \"VideoGame\", isDone: false},\r\n            {id: v1(), title: \"VideoFilm\", isDone: false}\r\n        ]\r\n\r\n\r\n    })\r\n\r\n    let [todolist, dispatchTodolist] = useReducer(TodolistReducer, [\r\n        {id: todolist1, title: 'What to learn', filter: 'All'},\r\n        {id: todolist2, title: 'What to buy', filter: 'All'}\r\n    ])\r\n    const deleteTask = (id: string, idTodolist: string) => {\r\n        dispatchTasks(deleteTaskAC(id, idTodolist))\r\n    }\r\n\r\n    const changeFilter = (isDoneStatus: FilterValuesType, todolistId: string) => {\r\n        dispatchTodolist(changeFilterAC(isDoneStatus, todolistId))\r\n    }\r\n\r\n    const addNewTask = (titleTask: string, idTodolist: string) => {\r\n        dispatchTasks(addNewTaskAC(titleTask, idTodolist))\r\n    }\r\n\r\n    const changeStatusTask = (id: string, isDone: boolean, idTodolist: string) => {\r\n        dispatchTasks(changeStatusTaskAC(id, isDone, idTodolist))\r\n    }\r\n\r\n    const deleleTodolist = (idTodolist: string) => {\r\n        dispatchTodolist(deleteTodolistAC(idTodolist))\r\n        dispatchTasks(deleleTasksForTodolistAC(idTodolist))\r\n    }\r\n\r\n    const addTodolist = (title: string) => {\r\n        const todolistID = v1()\r\n        dispatchTodolist(addTodolistAC(title, todolistID))\r\n        dispatchTasks(addTasksForTodolistAC(todolistID))\r\n    }\r\n\r\n    const changeTitleTodolist = (title: string, idtodolist: string) => {\r\n        dispatchTodolist(changeTitleTodolistAC(title, idtodolist))\r\n    }\r\n    const changeTitleTask = (title: string, id: string, idTodolist: string) => {\r\n        dispatchTasks(changeTitleTaskAC(title, id, idTodolist))\r\n    }\r\n    const mappingTodolists = todolist.map(t => {\r\n        let arrayTasks = tasks[t.id]\r\n        return (<Grid key={t.id} item>\r\n            <Paper style={{padding: '5px 10px 10px 10px'}}>\r\n                <Todolist deleleTodolist={deleleTodolist}\r\n                          todolistId={t.id}\r\n                          title={t.title}\r\n                          tasks={arrayTasks}\r\n                          deleteTask={deleteTask}\r\n                          changeFilter={changeFilter}\r\n                          addNewTask={addNewTask}\r\n                          addCheckedTask={changeStatusTask}\r\n                          filter={t.filter}\r\n                          changeTitleTodolist={changeTitleTodolist}\r\n                          changeTitleTaks={changeTitleTask}\r\n                />\r\n            </Paper>\r\n        </Grid>)\r\n    })\r\n\r\n    return (<div className=\"App\">\r\n        <AppBar position=\"static\">\r\n            <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                <IconButton edge=\"start\" color=\"secondary\" aria-label=\"menu\">\r\n                    <Menu/>\r\n                </IconButton>\r\n                <Typography variant=\"h5\">\r\n                    Todolists\r\n                </Typography>\r\n                <Button color=\"inherit\" variant={\"outlined\"}>Logout</Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n        <Container fixed>\r\n            <Grid container style={{paddingTop: '20px', paddingBottom: '20px'}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={5}>\r\n                {mappingTodolists}\r\n            </Grid>\r\n        </Container>\r\n\r\n    </div>)\r\n\r\n\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {createTheme, CssBaseline, ThemeProvider} from \"@material-ui/core\";\r\nimport {green} from \"@material-ui/core/colors\";\r\n// если фигня с интернетом, оно спасает\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        type: 'dark',\r\n        primary: {\r\n            main: '#00695f',\r\n        },\r\n        secondary: {\r\n            main: '#c6ff00',\r\n        },\r\n    },\r\n\r\n});\r\n\r\n\r\nReactDOM.render(<ThemeProvider theme={theme}><CssBaseline/><App/></ThemeProvider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}